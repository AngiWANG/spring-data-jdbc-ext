<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="core.querydsl">
  <title>Querydsl Support (Deprecated)</title>

  <note>
    <para>Due to changes in Querydsl, the Spring JDBC Extensions support for 
        Querydsl is no longer compatible with more recent versions. 
        We are deprecating this support and recommend that users switch to use the 
        Querydsl project's Spring support and use the Querydsl APIs directly. See 
        <ulink
  url="https://github.com/querydsl/querydsl/tree/master/querydsl-sql-spring">https://github.com/querydsl/querydsl/tree/master/querydsl-sql-spring</ulink>
    </para>
  </note>

  <para>The Querydsl project provides a framework that let's you write
  type-safe queries in Java rather than constructing them using strings. This
  has several advantages like code completion in your IDE, domain types and
  properties can be accessed in a type-safe manner reducing the probability of
  query syntax errors during run-time. Querydsl has modules that support JPA,
  JDO, SQL, MongoDB and more. It is the SQL support that is used for the JDBC
  Extensions project. You can read more about Querydsl at their website <ulink
  url="http://www.querydsl.com">http://www.querydsl.com</ulink>.</para>

  <section id="core.querydsl.intro">
    <title>Introduction to Querydsl</title>

    <para>Before you can use the Spring support for Querydsl you need to
    configure your application to use the Querydsl SQL support. See the
    instruction in the Mysema <ulink
    url="http://blog.mysema.com/2011/01/querying-in-sql-with-querydsl.html">blog
    post</ulink> on how this is done. Once you have generated your Querydsl
    query types then you can start using the Spring support as outlined
    bellow.</para>
  </section>

  <section id="core.querydsl.template">
    <title>QueryDslJdbcTemplate</title>

    <para>The central class in the Querydsl support is the
    <classname>QueryDslJdbcTemplate</classname>. Just like the
    <classname>NamedParameterJdbcTemplate</classname> it wraps a regular
    <classname>JdbcTemplate</classname> that you can get access to by calling
    the <classname>getJdbcOperations</classname> method. One thing to note is
    that when you use the <classname>QueryDslJdbcTemplate</classname>, there
    is no need to specify the SQL dialect to be used since the template will
    auto-detect this when it is created.</para>

    <para>You can create a QueryDslJdbcTemplate by passing in a JdbcTemplate
    or a DataSource in the constructor. Here is some example code showing
    this:</para>

    <programlisting language="java">private QueryDslJdbcTemplate template;

@Autowired
public void setDataSource(DataSource dataSource) {
    this.template = new QueryDslJdbcTemplate(dataSource);
}</programlisting>

    <para>At this point the template is ready to be used and we give examples
    for various uses below.</para>
  </section>

  <section id="core.querydsl.queries">
    <title>Queries</title>

    <para>For queries you need to have a reference to the query type. For the
    examples in this document we define the query type as follows:</para>

    <programlisting language="java">private final QProduct qProduct = QProduct.product;</programlisting>

    <para>Now we are ready to create the first query. Instead of directly
    creating an instance of <classname>SQLQueryImpl</classname> we ask the
    template for a managed instance.</para>

    <programlisting language="java">SQLQuery sqlQuery = template.newSqlQuery()</programlisting>

    <para>The managed part here refers to the managing of the connection and
    the SQL dialect. The <classname>QueryDslJdbcTemplate</classname> will
    provide both of these. The dialect is set when the
    <classname>SQLQuery</classname> is created and the connection is provided
    when the <classname>SQLQuery</classname> is executed using the clone
    feature of the <classname>SQLQuery</classname> implementation
    class.</para>

    <para>We continue to build this query providing from and where
    clauses:</para>

    <programlisting language="java">SQLQuery sqlQuery = template.newSqlQuery().from(qProduct)
        .where(qProduct.category.eq(categoryId));</programlisting>

    <para>Here <parameter>categoryId</parameter> is a parameter that is passed
    in to the method.</para>

    <para>The final step is to execute the query. Depending on how you want to
    map the results, there are two flavors of the query methods. You
    can</para>

    <itemizedlist>
      <listitem>
        <para>use the method taking a regular Spring
        <classname>RowMapper</classname> together with a projection in the
        form of a Querydsl <classname>Expression</classname>.</para>
      </listitem>
    </itemizedlist>

    <para>or</para>

    <itemizedlist>
      <listitem>
        <para>use the method that takes a Querydsl class implementing
        <classname>Expression</classname> like an extension of the handy
        <classname>MappingProjection</classname>, a
        <classname>QBean</classname> implementation or a Querydsl query type
        combined with a Querydsl bean type to specify the mapping.</para>
      </listitem>
    </itemizedlist>

    <para>Here is an example using the query created above together with a
    <classname>MappingProjection</classname> for mapping the query
    results:</para>

    <para><programlisting language="java">public List&lt;Product&gt; getProductListByCategory(final String categoryId)
        throws DataAccessException {

    SQLQuery sqlQuery = template.newSqlQuery().from(qProduct)
            .where(qProduct.category.eq(categoryId));

    return template.query(sqlQuery, new MappingProductProjection(qProduct);
}

private static class MappingProductProjection extends MappingProjection&lt;Product&gt; {

    public MappingProductProjection(QProduct qProduct) {
        super(Product.class, qProduct.productid,
            qProduct.name, qProduct.descn, qProduct.category));
    }

    @Override
    protected Product map(Tuple tuple) {
        Product product = new Product();

        product.setProductId(tuple.get(qProduct.productid));
        product.setName(tuple.get(qProduct.name));
        product.setDescription(tuple.get(qProduct.descn));
        product.setCategoryId(tuple.get(qProduct.category));

        return product;
    }
}</programlisting></para>
  </section>

  <section id="core.querydsl.inserts">
    <title>Inserts</title>

    <para>For inserts we need to call the template's
    <methodname>insert</methodname> method and implement an
    <classname>SqlInsertCallback</classname> to handle the mapping of data
    from the domain object values to the insert. Here is an example:</para>

    <programlisting language="java">public void insertProduct(final Product product) throws DataAccessException {
    template.insert(qProduct, new SqlInsertCallback() {
        public long doInSqlInsertClause(SQLInsertClause sqlInsertClause) {
            return sqlInsertClause.columns(qProduct.productid, qProduct.name, 
                        qProduct.descn, qProduct.category)
                    .values(product.getProductId(), product.getName(), 
                        product.getDescription(), product.getCategoryId())
                    .execute();
        }
    });
}</programlisting>

    <para></para>
  </section>

  <section id="core.querydsl.updates">
    <title>Updates</title>

    <para>Updates are similar to the inerts but we of course call the
    <methodname>update</methodname> method and implement an
    <classname>SqlUpdateCallback</classname> to provide the where clause and
    handle the mapping of update parameter values.</para>

    <programlisting language="java">public void updateProduct(final Product product) throws DataAccessException {
    template.update(qProduct, new SqlUpdateCallback() {

        public long doInSqlUpdateClause(SQLUpdateClause sqlUpdateClause) {
            return sqlUpdateClause.where(qProduct.productid.eq(product.getProductId()))
                    .set(qProduct.name, product.getName())
                    .set(qProduct.descn, product.getDescription())
                    .set(qProduct.category, product.getCategoryId())
                    .execute();
        }
    });
}</programlisting>

    <para></para>
  </section>

  <section id="core.querydsl.deletes">
    <title>Deletes</title>

    <para>Deletes are also very similar except we don't need to do any value
    mapping. We simply call the <methodname>delete</methodname> method and
    implement an <classname>SqlDeleteCallback</classname> with a where
    clause.</para>

    <programlisting language="java">public void deleteProduct(final Product product) {
    template.delete(qProduct, new SqlDeleteCallback() {

        public long doInSqlDeleteClause(SQLDeleteClause sqlDeleteClause) {
            return sqlDeleteClause.where(qProduct.productid.eq(product.getProductId()))
                    .execute();
        }
    });
}
</programlisting>

    <para></para>
  </section>
</chapter>
