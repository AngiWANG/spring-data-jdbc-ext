<?xml version="1.0" encoding="UTF-8"?>
<chapter id="orcl.datatypes">
  <title>Advanced Data Types</title>

  <para>The Oracle database and the PL/SQL language used for stored procedures
  in Oracle has built in support for some advanced data types. These data
  types can't easily be accessed using standard JDBC APIs, so it is necessary
  to rely on Oracle's JDBC extensions like ARRAY and STRUCT and the APIs that
  are used to access them.</para>

  <para>The JDBC framework provided with the Spring Framework supports most of
  this already via <classname>SqlTypeValue</classname> and
  <classname>SqlReturnType</classname>. The
  <classname>SqlTypeValue</classname> interface is used to pass IN parameter
  values. This is easiest accomplished by extending the
  <classname>AbstractSqlTypeValue</classname> class. Here you need to
  implement the createTypeValue method. In this method you have access to the
  current connection, the <classname>SqlType</classname> and the type name for
  any custom processing that is necessary. When you retrieve advanced data
  types you need to implement the <classname>SqlReturnType</classname>
  interface and pass that implementation into the
  <classname>SqlOutParameter</classname> constructor. The
  <classname>SqlReturnType</classname> interface has one method named
  <classname>getTypeValue</classname> that must be implemented. Here you have
  access to the CallableStatement that is currently executing as well as the
  parameterIndex, the <classname>SqlType</classname> and the type name for
  customizing the processing.</para>

  <para>When implementing these interfaces there is some boilerplate type code
  that is necessary and it makes your data access code look unnecessarily
  complex. That is the reason why we are providing a number of Oracle specific
  implementations that can handle the Oracle advanced types. The usage of
  these type handlers is documented in this chapter. These features are
  specifically targeted for an Oracle environment so teams can take advantage
  of this support and have a reference for best practices for the use of these
  features in an Oracle/Spring environment.</para>

  <para>We will use the following simple table for all the examples in this
  chapter. This table is used to store some basic information about
  actors.</para>

  <programlisting>CREATE TABLE actor (
    id NUMBER(10),
    name VARCHAR2(50),
    age NUMBER,
    PRIMARY KEY (id));</programlisting>

  <section id="orcl.datatypes.struct">
    <title>Using a STRUCT parameter</title>

    <para>When your stored procedures has parameters that are declared using
    custom object types that aren't part of the standard JDBC types they are
    managed using JDBC <classname>Struct</classname> objects. When working
    with Oracle it's easier to work with Oracle's extension to
    <classname>Struct</classname> which is
    <classname>oracle.sql.STRUCT</classname>.</para>

    <para>For the <literal>STRUCT</literal> examples we will use the following
    type declaration.</para>

    <programlisting>CREATE OR REPLACE TYPE actor_type
    AS OBJECT (id NUMBER(10), name VARCHAR2(50), age NUMBER);</programlisting>

    <para>The data contained in a STRUCT parameter can be accessed in two
    ways. Either using the <classname>SQLData</classname> interface which is
    part of the JDBC specification, or by using Oracle specific calls
    accessing the attributes directly. We will cover both methods.</para>

    <para>Now we will look at the sample procedures used for this example.
    First one is the procedure we use to add the actor data.</para>

    <programlisting>CREATE OR REPLACE PROCEDURE add_actor (in_actor IN actor_type)
AS
BEGIN
  INSERT into actor (id, name, age) VALUES(in_actor.id, in_actor.name, in_actor.age);
END;</programlisting>

    <para>This procedure has one IN parameter (in_actor) of object type
    <classname>actor_type</classname>.</para>

    <para>Next we show the procedure used to retrieve the actor data.</para>

    <programlisting>CREATE OR REPLACE PROCEDURE get_actor (in_actor_id IN NUMBER, out_actor OUT actor_type)
AS
BEGIN
  SELECT actor_type(id, name, age) INTO out_actor FROM actor WHERE id = in_actor_id;
END;</programlisting>

    <para>This procedure has two parameters, one IN parameter
    (<classname>in_actor_id</classname>) that is the id of the actor to
    retrieve and one OUT parameter (<classname>out_actor</classname>) of type
    <classname>actor_type</classname> to pass back the data retrieved.</para>

    <para>The last piece we will cover here is the Java class that represents
    the type we are accessing. Here is the <classname>Actor</classname>
    implementation used in this example. It has the Java equivalent of the
    variables we defined for the type in the database. We also have setters
    and getters for all fields.</para>

    <programlisting>package org.springframework.data.jdbc.samples;

import java.sql.SQLData;
import java.sql.SQLException;
import java.sql.SQLInput;
import java.sql.SQLOutput;
import java.math.BigDecimal;

public class Actor {

    private Long id;
    private String name;
    private int age;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String toString() {
    return "Actor: [" + id + "] " + name + " " + age;
    }

}
</programlisting>

    <section>
      <title>Using an SQLData implementation for a STRUCT IN parameter</title>

      <para>For the examples that use <classname>SQLData</classname> we first
      need a Java class that implements the SQLData interface. For this
      example we create an <classname>SqlActor</classname> class that extends
      the <classname>Actor</classname> class shown earlier and provides the
      <classname>SQLData</classname> implementation for our
      <classname>ACTOR_TYPE</classname>.</para>

      <programlistingco>
        <areaspec>
          <area coords="10" id="datatypes.sqldata.returntype" />

          <area coords="14" id="datatypes.sqldata.readsql" />

          <area coords="20" id="datatypes.sqldata.writesql" />
        </areaspec>

        <programlisting>package org.springframework.data.jdbc.samples;

import java.sql.SQLData;
import java.sql.SQLException;
import java.sql.SQLInput;
import java.sql.SQLOutput;
import java.math.BigDecimal;

public class SqlActor extends Actor implements SQLData {

    public String getSQLTypeName() throws SQLException {
        return "ACTOR_TYPE";
    }

    public void readSQL(SQLInput sqlInput, String string) throws SQLException {
        setId(Long.valueOf(sqlInput.readLong()));
        setName(sqlInput.readString());
        setAge(sqlInput.readInt());
    }

    public void writeSQL(SQLOutput sqlOutput) throws SQLException {
        sqlOutput.writeLong(getId().longValue());
        sqlOutput.writeString(getName());
        sqlOutput.writeInt(getAge());
    }

}
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.sqldata.returntype">
            <para>Here we specify the <classname>ACTOR_TYPE</classname>
            advanced data type as the type supported by this implementation.
            Note: Since Oracle's metadata is stored using all caps, unless the
            name was explicitly defined as mixed case using quotes, we define
            the type name here as all caps.</para>
          </callout>

          <callout arearefs="datatypes.sqldata.readsql">
            <para>Here we specify the implementation used to map data between
            the <classname>ACTOR_TYPE</classname> advanced data type and the
            <classname>Actor</classname> class during a read operation.</para>
          </callout>

          <callout arearefs="datatypes.sqldata.writesql">
            <para>Here we specify the implementation used to map data between
            the <classname>Actor</classname> class and the
            <classname>ACTOR_TYPE</classname> advanced data type during a
            write operation.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>As you can see, the <classname>SQLData</classname> implementation
      is fairly straightforward. We implemented the three methods required in
      the <classname>SQLData</classname> interface. These methods are
      getSQLTypeName, readSQL and writeSQL.</para>

      <para>Now we can move on to actually call the stored procedure. First
      example is using the newer <classname>SimpleJdbcCall</classname> API but
      the <classname>SqlParameter</classname> would be the same if you used
      the classic <classname>StoredProcedure</classname> approach. We create
      the <classname>SimpleJdbcCall</classname> and in the
      <classname>declareParameters</classname> method call we pass in an
      <classname>SqlParameter</classname> that defines the parameter with the
      type as OracleTypes.STRUCT and a type name of ACTOR_TYPE to match what
      it is defined in the database. Note that the type name is defined here
      as all caps since that is how it is stored in the database metadata. Any
      type names declared here are case sensitive and must match what is
      actually stored in the database metadata.</para>

      <programlistingco>
        <areaspec>
          <area coords="4" id="datatypes.sqldata.in.call.1" />
        </areaspec>

        <programlisting>    this.addSqlActorCall =
            new SimpleJdbcCall(dataSource).withProcedureName("add_actor")
                .declareParameters(
                    new SqlParameter("in_actor", OracleTypes.STRUCT, "ACTOR_TYPE"));
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.sqldata.in.call.1">
            <para>We define the <classname>SqlParameter</classname> with
            parameter name, the Oracle type and the type name as it is
            declared in the database.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>Next we look at the code that executes this
      <classname>SimpleJdbcCall</classname>.</para>

      <programlistingco>
        <areaspec>
          <area coords="2" id="datatypes.sqldata.in.exec.1" />
        </areaspec>

        <programlisting>    public void addSqlActor(final SqlActor actor) {
        Map in = Collections.singletonMap("in_actor", actor);
        addSqlActorCall.execute(in);
    }
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.sqldata.in.exec.1">
            <para>We execute the call by passing in a
            <classname>Map</classname> containing any in parameters - in this
            case the actor object.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>What happens here is that the JDBC driver access the data in the
      passed in Actor instance via the <classname>SQLData</classname>
      interface and maps that data to the ACTOR_TYPE passed in to the stored
      procedure. There is no need to implement anything else since this is all
      handled by the JDBC layer.</para>

      <para>Please note that since <classname>SimpleJdbcCall</classname> is
      relying on database metadata, the parameter names used for the input
      must match the names used when declaring the stored procedure. They are
      however not case sensitive, only the type names are case
      sensitive.</para>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class AddSqlActorProc extends StoredProcedure {

        public AddSqlActorProc(DataSource dataSource) {
            super(dataSource, "add_actor");
            declareParameter(new SqlParameter("in_actor", OracleTypes.STRUCT, "ACTOR_TYPE"));
        }

        public void execute(Actor actor) {
            Map in = Collections.singletonMap("in_actor", actor);
            this.execute(in);
        }

    }
</programlisting>
    </section>

    <section>
      <title>Using SqlReturnSqlData with an SQLData implementation from a
      STRUCT OUT parameter</title>

      <para>Now we will call the stored procedure that retrieves actor data.
      We are still using the newer <classname>SimpleJdbcCall</classname> API.
      We create the <classname>SimpleJdbcCall</classname> and in the
      <classname>declareParameters</classname> call we pass in an
      <classname>SqlOutParameter</classname> that uses an
      <classname>SqlReturnType</classname> to handle the configuration
      necessary for the mapping between the Oracle type and the Java type
      which is still the <classname>SqlActor</classname>. We also need to link
      between the <classname>Actor</classname> class and the
      <classname>ACTOR_TYPE</classname> since the JDBC driver is not aware of
      this relationship when we are reading data from the database. This is
      done by declaring a SqlReturnSqlData class and passing in the target
      class in the constructor.</para>

      <programlistingco>
        <areaspec>
          <area coords="4" id="datatypes.sqldata.out.call.1" />

          <area coords="5" id="datatypes.sqldata.out.call.2" />
        </areaspec>

        <programlisting>        this.getSqlActorCall =
                new SimpleJdbcCall(dataSource).withProcedureName("get_actor")
                    .declareParameters(
                        new SqlOutParameter("out_actor", OracleTypes.STRUCT, "ACTOR_TYPE",
                            new SqlReturnSqlData(SqlActor.class))
                    );
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.sqldata.out.call.1">
            <para>We define the parameter name and the Oracle type and the
            type name as it is declared in the database.</para>
          </callout>

          <callout arearefs="datatypes.sqldata.out.call.2">
            <para>Here we define the <classname>SqlReturnSqlData</classname>
            and the desired target class.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>Next we look at the code that executes this
      <classname>SimpleJdbcCall</classname>.</para>

      <programlistingco>
        <areaspec>
          <area coords="3" id="datatypes.sqldata.out.exec.1" />
        </areaspec>

        <programlisting>    public SqlActor getSqlActor(int id) {
        Map in = Collections.singletonMap("in_actor_id", id);
        return getSqlActorCall.executeObject(SqlActor.class, in);
    }
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.sqldata.out.exec.1">
            <para>We execute the call by passing in a
            <classname>Map</classname> containing any in parameters. The
            <classname>execute</classname>Object method returns an
            <classname>SqlActor</classname> containing the data returned by
            the stored procedure call.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class GetSqlActorProc extends StoredProcedure {

        public GetSqlActorProc(DataSource dataSource) {
            super(dataSource, "get_actor");
            declareParameter(new SqlParameter("in_actor_id", Types.NUMERIC));
            declareParameter(
                new SqlOutParameter("out_actor", OracleTypes.STRUCT, "ACTOR_TYPE",
                    new SqlReturnSqlData(SqlActor.class))
            );
        }

        public SqlActor execute(Long id) {
            Map in = Collections.singletonMap("in_actor_id", id);
            Map out = this.execute(in);
            return (SqlActor) out.get("out_actor");
        }

    }
</programlisting>
    </section>

    <section>
      <title>Setting STRUCT attribute values using SqlStructValue for an IN
      parameter</title>

      <para>An alternate access technique is to use the
      <classname>Struct</classname> interface to access a generic collection
      of attributes representing the type. The
      <classname>SqlStructValue</classname> implementation will map properties
      in a JavaBean to the corresponding attributes of the STRUCT so there is
      no need to provide custom mapping code. The following example will
      perform the same operations as the previous example using this alternate
      technique.</para>

      <para>The SimpleJdbcCall declaration for the "add_actor" call looks the
      same.</para>

      <programlistingco>
        <areaspec>
          <area coords="4" id="datatypes.struct.in.call.1" />
        </areaspec>

        <programlisting>    this.addActorCall =
            new SimpleJdbcCall(dataSource).withProcedureName("add_actor")
                .declareParameters(
                    new SqlParameter("in_actor", OracleTypes.STRUCT, "ACTOR_TYPE"));
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.struct.in.call.1">
            <para>We define the <classname>SqlParameter</classname> with
            parameter name, the Oracle type and the type name as it is
            declared in the database.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>Next we'll look at the code used to execute this procedure call.
      The difference is in the execution and the mapping of attributes.
      Instead of relying on the <classname>SqlActor</classname> class to do
      the mapping, we create a <classname>SqlStructValue</classname> and pass
      in the <classname>Actor</classname> instance in the constructor. The
      <classname>SqlStructValue</classname> class will do the mapping between
      the bean properties of the Actor class and the attributes of the STRUCT.
      This <classname>SqlStructValue</classname> is then passed in as the data
      value in the input map for the execute call.</para>

      <programlistingco>
        <areaspec>
          <area coords="2" id="datatypes.struct.in.exec.1" />

          <area coords="3" id="datatypes.struct.in.exec.2" />
        </areaspec>

        <programlisting>    public void addActor(final Actor actor) {
        Map in = Collections.singletonMap("in_actor", new SqlStructValue(actor));
        addActorCall.execute(in);
    }
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.struct.in.exec.1">
            <para>We create an <classname>SqlStructValue</classname> that will
            handle the type creation and mapping and add it to the
            <classname>Map</classname> containing the in parameters.</para>
          </callout>

          <callout arearefs="datatypes.struct.in.exec.2">
            <para>We execute the call by passing in the input
            <classname>Map</classname>.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class AddActorProc extends StoredProcedure {

        public AddActorProc(DataSource dataSource) {
            super(dataSource, "add_actor");
            declareParameter(new SqlParameter("in_actor", OracleTypes.STRUCT, "ACTOR_TYPE"));
        }

        public void execute(Actor actor) {
            Map in = Collections.singletonMap("in_actor", new SqlStructValue(actor));
            this.execute(in);
        }

    }
</programlisting>
    </section>

    <section>
      <title>Using SqlReturnStruct to access STRUCT data from an OUT
      parameter</title>

      <para>You can use the <classname>SqlReturnStruct</classname> class to
      map between the attributes of a <classname>STRUCT</classname> object and
      properties of a <classname>JavaBean</classname>. This is more convenient
      than providing this mapping yourself. This example will show how this
      can be done using an SqlOutParameter combined with the
      <classname>SqlReturnStruct</classname> class.</para>

      <programlistingco>
        <areaspec>
          <area coords="4" id="datatypes.struct.out.call.1" />

          <area coords="5" id="datatypes.struct.out.call.2" />
        </areaspec>

        <programlisting>    this.getActorCall =
            new SimpleJdbcCall(dataSource).withProcedureName("get_actor")
                .declareParameters(
                    new SqlOutParameter("out_actor", OracleTypes.STRUCT, "ACTOR_TYPE",
                            new SqlReturnStruct(Actor.class))
            );
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.struct.out.call.1">
            <para>We define the <classname>SqlParameter</classname> with
            parameter name, the Oracle type and the type name as it is
            declared in the database.</para>
          </callout>

          <callout arearefs="datatypes.struct.out.call.2">
            <para>The <classname>SqlReturnStruct</classname> will retrieve the
            STRUCT and access the array of objects representing the attributes
            and then map them to the properties of the
            <classname>JavaBean</classname> instance provided n the
            constructor.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>Next we look at the code that executes this
      <classname>SimpleJdbcCall</classname>.</para>

      <programlistingco>
        <areaspec>
          <area coords="3" id="datatypes.struct.out.exec.1" />
        </areaspec>

        <programlisting>    public Actor getActor(int id) {
        Map in = Collections.singletonMap("in_actor_id", id);
        return getActorCall.executeObject(Actor.class, in);
    }
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.struct.out.exec.1">
            <para>We execute the call by passing in a
            <classname>Map</classname> containing any in parameters. The
            <classname>execute</classname>Object method returns an
            <classname>Actor</classname> containing the data returned by the
            stored procedure call.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class GetActorProc extends StoredProcedure {

        public GetActorProc(DataSource dataSource) {
            super(dataSource, "get_actor");
            declareParameter(new SqlParameter("in_actor_id", Types.NUMERIC));
            declareParameter(
                new SqlOutParameter("out_actor", OracleTypes.STRUCT, "ACTOR_TYPE",
                        new SqlReturnStruct(Actor.class))
            );
        }

        public Actor execute(Long id) {
            Map in = Collections.singletonMap("in_actor_id", id);
            Map out = this.execute(in);
            return (Actor) out.get("out_actor");
        }

    }
</programlisting>
    </section>
  </section>

  <section id="orcl.datatypes.array">
    <title>Using an ARRAY parameter</title>

    <para>Sometimes your stored procedures has parameters that are declared as
    arrays of some type. These arrays are managed using JDBC
    <classname>Array</classname> objects. When working with Oracle it's
    sometimes easier to work with Oracle's extension to
    <classname>Array</classname> which is
    <classname>oracle.sql.ARRAY</classname>.</para>

    <para>For the <literal>ARRAY</literal> examples we will use the following
    type declarations.</para>

    <programlisting>CREATE OR REPLACE TYPE actor_name_array 
    AS VARRAY(20) OF VARCHAR2(50);
CREATE OR REPLACE TYPE actor_id_array 
    AS VARRAY(20) OF NUMBER;
</programlisting>

    <para>We will show how to access parameters using these declarations in
    two JDBC calls. The first one is a procedure call that deletes actor
    entries based on ids provided in an <literal>actor_id_array</literal>. The
    second example calls a function to retrieve an array of the names for all
    actors in the table.</para>

    <section>
      <title>Setting ARRAY values using SqlArrayValue for an IN
      parameter</title>

      <para>We are using the SimpleJdbcCall for this example and when we
      configure this call its important to note that we can't rely on the
      database metadata. Whenever a collection type is used the metadata
      reported back from the JDBC driver contains entries bot for the
      collection type and for the type contained in the collection so it looks
      like there are additional parameters. Because of this it is best to turn
      off the metadata processing by calling
      the<classname>withoutProcedureColumnMetaDataAccess</classname>
      method.</para>

      <para>This example calls a procedure that deletes actors based on the
      ids provided in an array. Here is the source for this procedure:</para>

      <programlisting>CREATE OR REPLACE PROCEDURE delete_actors (in_actor_ids IN actor_id_array)
AS
BEGIN
  FOR i IN 1..in_actor_ids.count loop
    DELETE FROM actor WHERE id = in_actor_ids(i);
  END LOOP;
END;</programlisting>

      <para>The declaration of the ARRAY parameter follows the same pattern as
      we used previously for the STRUCT parameters. We are simply providing
      the <classname>OracleTypes.ARRAY</classname> SQL type along with the
      type name as it is specified in the database metadata.</para>

      <para><programlistingco>
          <areaspec>
            <area coords="5" id="datatypes.array.in.call.1" />
          </areaspec>

          <programlisting>    this.deleteActorsCall =
            new SimpleJdbcCall(dataSource).withProcedureName("delete_actors")
                .withoutProcedureColumnMetaDataAccess()
                .declareParameters(
                    new SqlParameter("in_actor_ids", OracleTypes.ARRAY, "ACTOR_ID_ARRAY"));
</programlisting>

          <calloutlist>
            <callout arearefs="datatypes.array.in.call.1">
              <para>We define the <classname>SqlParameter</classname> with
              parameter name, the Oracle type and the type name as it is
              declared in the database.</para>
            </callout>
          </calloutlist>
        </programlistingco>Next we look at the code that executes this
      <classname>SimpleJdbcCall</classname>. For IN parameters the arrays are
      managed using an <classname>SqlArrayValue</classname> implementation
      that will handle the ArrayDescriptor creation and the mapping of the
      array to an oracle.sql.ARRAY instance.<programlistingco>
          <areaspec>
            <area coords="2" id="array.type.in.execute" />
          </areaspec>

          <programlisting>    public void deleteActors(final Long[] ids) {
        Map in = Collections.singletonMap("in_actor_ids", new SqlArrayValue(ids));
        deleteActorsCall.execute(in);
    }
</programlisting>

          <calloutlist>
            <callout arearefs="array.type.in.execute">
              <para>We declare an <classname>SqlArrayValue</classname>
              instance that will handle creating the
              <classname>ArrayDesriptor</classname> and the
              <classname>ARRAY</classname> to be passed in as the parameter
              value.</para>
            </callout>
          </calloutlist>
        </programlistingco></para>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class DeleteActorsProc extends StoredProcedure {

        public DeleteActorsProc(DataSource dataSource) {
            super(dataSource, "delete_actors");
            declareParameter(new SqlParameter("in_actor_ids", OracleTypes.ARRAY, "ACTOR_ID_ARRAY"));
        }

        public void execute(Long[] ids) {
            Map in = Collections.singletonMap("in_actor_ids", new SqlArrayValue(ids));
            Map out = this.execute(in);
        }

    }
</programlisting>
    </section>

    <section>
      <title>Using SqlReturnArray to handle the ARRAY from an OUT
      parameter</title>

      <para>Now it is time to handle the OUT parameter scenario. Here it is an
      SqlOutParameter combined with an SqlReturnArray instance that is
      responsible for handling the
      <classname>Array</classname>.<programlistingco>
          <areaspec>
            <area coords="4" id="datatypes.array.out.call.1" />

            <area coords="5" id="datatypes.array.out.call.2" />
          </areaspec>

          <programlisting>    this.getActorNamesCall =
            new SimpleJdbcCall(dataSource).withFunctionName("get_actor_names")
                .withoutProcedureColumnMetaDataAccess()
                .declareParameters(new SqlOutParameter("return", Types.ARRAY, "ACTOR_NAME_ARRAY",
                        new SqlReturnArray()));
</programlisting>

          <calloutlist>
            <callout arearefs="datatypes.array.out.call.1">
              <para>We declare an <classname>SqlOutParameter</classname> with
              parameter name, the Oracle type and the type name as it is
              declared in the database.</para>
            </callout>

            <callout arearefs="datatypes.array.out.call.2">
              <para>The <classname>SqlReturnArray</classname> accesses the
              ARRAY parameter using the JDBC calls and creates the
              <classname>String</classname> array that is the return value for
              this example.</para>
            </callout>
          </calloutlist>
        </programlistingco>Next we look at the code that executes this
      <classname>SimpleJdbcCall</classname>.</para>

      <para><programlistingco>
          <areaspec>
            <area coords="3" id="datatypes.array.out.exec.1" />
          </areaspec>

          <programlisting>    public String[] getActorNames() {
        Map in = Collections.emptyMap();
        return getActorNamesCall.executeFunction(String[].class, in);
    }
</programlisting>

          <calloutlist>
            <callout arearefs="datatypes.array.out.exec.1">
              <para>Here we just have to call executeFunction passing in the
              expected output class and an empty map since there are no IN
              parameters.</para>
            </callout>
          </calloutlist>
        </programlistingco></para>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class GetActorNamesProc extends StoredProcedure {

        public GetActorNamesProc(DataSource dataSource) {
            super(dataSource, "get_actor_names");
            setFunction(true);
            declareParameter(new SqlOutParameter("return", Types.ARRAY, "ACTOR_NAME_ARRAY",
                    new SqlReturnArray()));
        }

        public String[] execute() {
            Map in = Collections.emptyMap();
            Map out = this.execute(in);
            return (String[]) out.get("return");
        }

    }
</programlisting>
    </section>
  </section>

  <section id="orcl.datatypes.ref_cur">
    <title>Handling a REF CURSOR</title>

    <para>The Spring Framework already contains implementations that simplify
    the handling of REF CURSORS but we include an example here just to
    complete the coverage of the handling of Oracle specific advanced data
    types. The procedure we are calling is declared as follows:</para>

    <programlisting>CREATE OR REPLACE PROCEDURE read_actors (out_actors_cur OUT sys_refcursor)
AS
BEGIN
  OPEN out_actors_cur FOR 'select * from actor';
END;</programlisting>

    <section>
      <title>Retrieving data using a ParameterizedBeanPropertyRowMapper from a
      REF CURSOR</title>

      <para>First we'll look at a <classname>SimpleJdbcCall</classname>
      implementation where we use the
      <classname>returningResultSet</classname> method to declare the
      <classname>RowMapper</classname> we want to use. We have an Actor class
      that is a JavaBean and the properties match the column names so we can
      use the ParameterizedBeanPropertyRowMapper to automatically map data
      from the <classname>ResultSet</classname> to the bean properties. Here
      is the code used to declare this
      <classname>SimpleJdbcCall</classname>:</para>

      <programlistingco>
        <areaspec>
          <area coords="3" id="datatypes.refcur.out.call.1" />

          <area coords="4" id="datatypes.refcur.out.call.2" />
        </areaspec>

        <programlisting>    this.readActorsCall =
            new SimpleJdbcCall(dataSource).withProcedureName("read_actors")
                .returningResultSet("out_actors_cur",
                        ParameterizedBeanPropertyRowMapper.newInstance(Actor.class));
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.refcur.out.call.1">
            <para>We declare a <classname>returningResultSet</classname> with
            parameter name and the <classname>RowMapper</classname> we would
            like to use.</para>
          </callout>

          <callout arearefs="datatypes.refcur.out.call.2">
            <para>The
            <classname>ParameterizedBeanPropertyRowMapper</classname> accesses
            the <classname>ResultSetMetaData</classname> and maps the row
            columns to corresponding bean properties in the class specified as
            parameter to the <classname>newInstace</classname> method
            call.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>To execute this call we use the following code:</para>

      <programlistingco>
        <areaspec>
          <area coords="3" id="datatypes.refcur.out.exec.1" />
        </areaspec>

        <programlisting>    public List&lt;Actor&gt; getActors() {
        return readActorsCall.executeObject(List.class, Collections.emptyMap());
    }
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.refcur.out.exec.1">
            <para>Here we just have to call executeObject passing in the
            expected output class which is a <classname>List</classname> and
            an empty map since there are no IN parameters.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>When using the StoredProcedure class we would need to use an
      <classname>SqlOutParameter</classname> that accepts a
      <classname>RowMapper</classname>. Here is an example of an
      <classname>SqlOutParameter</classname> configured with a
      <classname>ParameterizedBeanPropertyRowMapper</classname>.</para>

      <programlistingco>
        <areaspec>
          <area coords="3" id="datatypes.refcur.out.proc.1" />
        </areaspec>

        <programlisting>        new SqlOutParameter("out_actors_cur", OracleTypes.CURSOR, 
                ParameterizedBeanPropertyRowMapper.newInstance(Actor.class))
</programlisting>

        <calloutlist>
          <callout arearefs="datatypes.refcur.out.proc.1">
            <para>Here we specify the parameter name and the SQL type which is
            <classname>OracleTypes.CURSOR</classname> and instantiate a
            <classname>ParameterizedBeanPropertyRowMapper</classname> to be
            used to map row data to the <classname>Actor</classname>
            class.</para>
          </callout>
        </calloutlist>
      </programlistingco>

      <para>If you prefer to use the classic StoredProcedure class then the
      equivalent configuration would look like this:</para>

      <programlisting>    private class ReadActorsProc extends StoredProcedure {

        public ReadActorsProc(DataSource dataSource) {
            super(dataSource, "read_actors");
            declareParameter(
                new SqlOutParameter("out_actors_cur", OracleTypes.CURSOR,
                        ParameterizedBeanPropertyRowMapper.newInstance(Actor.class))
            );

        }

        public List execute() {
            Map in = Collections.emptyMap();
            Map out = this.execute(in);
            return (List) out.get("out_actors_cur");
        }

    }
</programlisting>
    </section>
  </section>
</chapter>